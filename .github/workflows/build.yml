name: Build

on: [push, pull_request]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_TYPE: Release

jobs:
  linux:
    runs-on: ubuntu-latest
    steps:
    - name: Get OCCT Source
      uses: actions/checkout@v2
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
    - name: Install Depencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tcl tk-dev build-essential libssl-dev libgl1-mesa-dev ninja-build
        mkdir build
    - name: build with cmake
      uses: lukka/run-cmake@v3
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        cmakeAppendedArgs: '-DCMAKE_BUILD_TYPE=Release -DUSE_FREEIMAGE:BOOL=OFF -DUSE_RAPIDJSON:BOOL=OFF -DUSE_TBB:BOOL=OFF -DUSE_VTK:BOOL=OFF -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -GNinja'
        buildDirectory: '${{ github.workspace }}/build'
        buildWithCMake: true

    - name: Test OCCT
      working-directory: ${{github.workspace}}/build
      run: ctest -C Release

    - uses: actions/upload-artifact@v2
      name: occt-linux
      with:
        name: occt-linux
        path: |
          ${{github.workspace}}/build/lin64/gcc/
        if-no-files-found: error

  windows:
    runs-on: windows-latest

    steps:
    - name: Get OCCT Source
      uses: actions/checkout@v2

    - name: Download FreeType Binary
      working-directory: ${{github.workspace}}
      run: |
        mkdir 3rdparty
        Invoke-WebRequest -Uri ${{env.uri}} -OutFile 3rdparty/freetype.zip
      env:
        uri: 'https://github.com/ubawurinna/freetype-windows-binaries/releases/download/v2.6.5/freetype-2.6.5.zip'

    - name: Unzip FreeType
      working-directory: ${{github.workspace}}/3rdparty
      run: |
        mkdir freetype
        New-Item -Path ${{github.workspace}}/3rdparty/freetype -Name bin -ItemType "directory"
        New-Item -Path ${{github.workspace}}/3rdparty/freetype -Name lib -ItemType "directory"
        Expand-Archive -LiteralPath 'freetype.zip' -DestinationPath ${{github.workspace}}/3rdparty/freetype -Force
        Copy-Item -Path ${{github.workspace}}\3rdparty\freetype\win64\freetype.dll -Destination freetype/bin -force
        Copy-Item -Path ${{github.workspace}}\3rdparty\freetype\win64\freetype.dll -Destination freetype/lib -force
        Copy-Item -Path ${{github.workspace}}\3rdparty\freetype\win64\freetype.lib -Destination freetype/lib -force
        Copy-Item -Path ${{github.workspace}}\3rdparty\freetype\win64\freetype.lib -Destination freetype/bin -force

    - name: Install Doxygen
      run: |
        choco install doxygen.install

    - name: Get Tcl Source
      uses: actions/checkout@v2
      with:
        repository: tcltk/tcl
        ref: core-8-6-10
        path: ${{github.workspace}}/3rdparty/tcl

    - name: Get Tk Source
      uses: actions/checkout@v2
      with:
        repository: tcltk/tk
        ref: core-8-6-11-1
        path: ${{github.workspace}}/3rdparty/tk

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Install OCCT-Modified Tcl files
      run: |
        Copy-Item -Path ${{github.workspace}}/StirlingLabs/tcl/win/* -Destination 3rdparty/tcl/win -force
        Copy-Item -Path ${{github.workspace}}/StirlingLabs/tk/win/* -Destination 3rdparty/tk/win -force
        New-Item -Path ${{github.workspace}}/3rdparty -Name tcltk -ItemType "directory"

    - name: Build & Install Tcl
      run: |
        ./buildall.vc.bat
        ./buildall.vc.bat install
      working-directory: ${{github.workspace}}/3rdparty/tcl/win
      env:
        INSTALLDIR: ../../tcltk

    - name: Build & Install Tk
      run: |
        ./buildall.vc.bat
        ./buildall.vc.bat install
      working-directory: ${{github.workspace}}/3rdparty/tk/win
      env:
        INSTALLDIR: ../../tcltk

    - name: Create versionless tcl/tk executables
      run: |
        Copy-Item -Path tclsh86.exe -Destination tclsh.exe -force
        Copy-Item -Path wish86.exe -Destination wish.exe -force
        Copy-Item -Path tk86.dll -Destination tk.dll -force
        Copy-Item -Path tcl86.dll -Destination tcl.dll -force
      working-directory: ${{github.workspace}}/3rdparty/tcltk/bin

    - name: Create versionless tcl/tk libs
      run: |
        Copy-Item -Path tk86.lib -Destination tk.lib -force
        Copy-Item -Path tkstub86.lib -Destination tkstub.lib -force
        Copy-Item -Path tcl86.lib -Destination tcl.lib -force
        Copy-Item -Path tclstub86.lib -Destination tclstub.lib -force
      working-directory: ${{github.workspace}}/3rdparty/tcltk/lib

    - name: Create OCCT Build Environment
      run: mkdir build

    - name: Add Path Msys64 Directory
      run: |
        echo "c:\msys64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - name: Install ccache
      shell: msys2_shell.cmd -defterm -no-start -here -mingw64 {0}
      run: |
        pacman -S --noconfirm mingw-w64-x86_64-ccache

    - name: Configure OCCT CMake
      shell: msys2_shell.cmd -defterm -no-start -here -mingw64 {0}
      run: |
        ${MINGW_PREFIX}/bin/cmake -G "MinGW Makefiles"  -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DUSE_FREEIMAGE:BOOL=OFF -DUSE_RAPIDJSON:BOOL=OFF -DUSE_TBB:BOOL=OFF -DUSE_VTK:BOOL=OFF -D3RDPARTY_DIR=/D/a/OCCT/OCCT/3rdparty -D3RDPARTY_FREETYPE_DIR=/D/a/OCCT/OCCT/3rdparty/freetype -D3RDPARTY_FREETYPE_INCLUDE_DIR=/D/a/OCCT/OCCT/3rdparty/freetype/include -D3RDPARTY_FREETYPE_LIBRARY_DIR=/D/a/OCCT/OCCT/3rdparty/freetype/bin -D3RDPARTY_FREETYPE_DLL_DIR=/D/a/OCCT/OCCT/3rdparty/freetype/bin -D3RDPARTY_TCL_INCLUDE_DIR=/D/a/OCCT/OCCT/3rdparty/tcltk/bin -D3RDPARTY_TCL_LIBRARY_DIR=/D/a/OCCT/OCCT/3rdparty/tcltk/lib -D3RDPARTY_TCL_DLL_DIR=/D/a/OCCT/OCCT/3rdparty/tcltk/bin -D3RDPARTY_TK_INCLUDE_DIR=/D/a/OCCT/OCCT/3rdparty/tcltk/bin -D3RDPARTY_TK_LIBRARY_DIR=/D/a/OCCT/OCCT/3rdparty/tcltk/lib -D3RDPARTY_TK_DLL_DIR=/D/a/OCCT/OCCT/3rdparty/tcltk/bin -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
    - name: Build OCCT
      shell: msys2_shell.cmd -defterm -no-start -here -mingw64 {0}
      run: cmake --build . --config Release -j2

    - name: Test OCCT
      working-directory: ${{github.workspace}}/build
      shell: msys2_shell.cmd -defterm -no-start -here -mingw64 {0}
      run: ctest -C Release

    - uses: actions/upload-artifact@v2
      name: occt-win
      with:
        name: occt-win
        path: |
          win64\gcc
        if-no-files-found: error

  osx:
    runs-on: macos-latest
    steps:
    - name: Get OCCT Source
      uses: actions/checkout@v2

    - name: Configure CMake
      run: |
        brew install ninja
        mkdir build
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
    - name: build with cmake
      uses: lukka/run-cmake@v3
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        cmakeAppendedArgs: '-DCMAKE_BUILD_TYPE=Release -DUSE_FREEIMAGE:BOOL=OFF -DUSE_RAPIDJSON:BOOL=OFF -DUSE_TBB:BOOL=OFF -DUSE_VTK:BOOL=OFF -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -GNinja'
        buildDirectory: '${{ github.workspace }}/build'
        buildWithCMake: true
    - uses: actions/upload-artifact@v2
      name: occt-osx
      with:
        name: occt-osx
        path: |
          ${{ github.workspace }}/build/mac64/clang/
        if-no-files-found: error

  create-release:
    runs-on: ubuntu-latest
    needs: [linux,osx,windows]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download occt windows
        uses: actions/download-artifact@v2
        with:
          name: occt-win
          path: win64
      - name: Download occt linux
        uses: actions/download-artifact@v2
        with:
          name: occt-linux
          path: linux
      - name: Download occt osx
        uses: actions/download-artifact@v2
        with:
          name: occt-osx
          path: osx
      - name: Zip file
        run: |
          mkdir artifacts
          tar -cvf artifacts/occt-win.zip win64
          tar -cvf artifacts/occt-linux.tar.gz linux
          tar -cvf artifacts/occt-osx.tar.gz osx
      - name: Release
        uses: softprops/action-gh-release@v0.1.12
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: Occt
          files: |
            artifacts/*.*
        env:
          GITHUB_TOKEN: ${{ github.token }}
