name: Build

on: [push]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Get OCCT Source
      uses: actions/checkout@v2
      
    - name: Download FreeType Binary
      uses: carlosperate/download-file-action@v1.0.3
      id: freetype-binary
      with:
        file-url: 'https://github.com/ubawurinna/freetype-windows-binaries/releases/download/v2.6.5/freetype-2.6.5.zip'
        file-name: "freetype.zip"
        location: "${{github.workspace}}/3rdparty"
    - name: Unzip FreeType
      working-directory: ${{github.workspace}}/3rdparty
      shell: bash
      run: |
        mkdir freetype
        unzip freetype.zip -d freetype
        cp freetype/win64/freetype.dll freetype/bin
        cp freetype/win64/freetype.lib freetype/lib
        cp freetype/win64/freetype.lib freetype/bin
    - name: Install Doxygen
      run: |
        choco install doxygen.install
        
    - name: Get Tcl Source
      uses: actions/checkout@v2
      with:
        repository: tcltk/tcl
        ref: core-8-6-10
        path: ${{github.workspace}}/3rdparty/tcl
    
    - name: Get Tk Source
      uses: actions/checkout@v2
      with:
        repository: tcltk/tk
        ref: core-8-6-11-1
        path: ${{github.workspace}}/3rdparty/tk
    
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
      with:
        vs-version: '10.0'

    - name: Install OCCT-Modified Tcl files
      run: |
        Copy-Item -Path ${{github.workspace}}/StirlingLabs/tcl/win/* -Destination 3rdparty/tcl/win -force
        Copy-Item -Path ${{github.workspace}}/StirlingLabs/tk/win/* -Destination 3rdparty/tk/win -force
        New-Item -Path ${{github.workspace}}/3rdparty -Name tcltk -ItemType "directory"

    - name: Build & Install Tcl
      run: |
        ./buildall.vc.bat
        ./buildall.vc.bat install
      working-directory: ${{github.workspace}}/3rdparty/tcl/win
      env:
        INSTALLDIR: ../../tcltk

    - name: Build & Install Tk
      run: |
        ./buildall.vc.bat
        ./buildall.vc.bat install
      working-directory: ${{github.workspace}}/3rdparty/tk/win
      env:
        INSTALLDIR: ../../tcltk

    - name: What have we got?
      run: |
        Get-ChildItem  -recurse -Path 3rdparty


    - name: Bash File List
      shell: bash
      run: |
        ls -la $GITHUB_WORKSPACE/3rdparty/freetype
        
    - name: Create versionless tcl/tk executables
      run: |
        Copy-Item -Path tclsh86.exe -Destination tclsh.exe -force
        Copy-Item -Path wish86.exe -Destination wish.exe -force
        Copy-Item -Path tk86.dll -Destination tk.dll -force
        Copy-Item -Path tcl86.dll -Destination tcl.dll -force
      working-directory: ${{github.workspace}}/3rdparty/tcltk/bin

    - name: Create versionless tcl/tk libs
      run: |
        Copy-Item -Path tk86.lib -Destination tk.lib -force
        Copy-Item -Path tkstub86.lib -Destination tkstub.lib -force
        Copy-Item -Path tcl86.lib -Destination tcl.lib -force
        Copy-Item -Path tclstub86.lib -Destination tclstub.lib -force
      working-directory: ${{github.workspace}}/3rdparty/tcltk/lib      

    - name: Create OCCT Build Environment
      # Create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure OCCT CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: >
        cmake $GITHUB_WORKSPACE 
        -DCMAKE_BUILD_TYPE=$BUILD_TYPE 
        -DUSE_FREEIMAGE:BOOL=OFF
        -DUSE_RAPIDJSON:BOOL=OFF
        -DUSE_TBB:BOOL=OFF
        -DUSE_VTK:BOOL=OFF
        -D3RDPARTY_DIR=$GITHUB_WORKSPACE/3rdparty
        -D3RDPARTY_FREETYPE_DIR=$GITHUB_WORKSPACE/3rdparty/freetype
        -D3RDPARTY_FREETYPE_INCLUDE_DIR=$GITHUB_WORKSPACE/3rdparty/freetype/include
        -D3RDPARTY_FREETYPE_LIBRARY_DIR=$GITHUB_WORKSPACE/3rdparty/freetype/bin
        -D3RDPARTY_FREETYPE_DLL_DIR=$GITHUB_WORKSPACE/3rdparty/freetype/bin
        -D3RDPARTY_TCL_INCLUDE_DIR=$GITHUB_WORKSPACE/3rdparty/tcltk/bin 
        -D3RDPARTY_TCL_LIBRARY_DIR=$GITHUB_WORKSPACE/3rdparty/tcltk/lib
        -D3RDPARTY_TCL_DLL_DIR=$GITHUB_WORKSPACE/3rdparty/tcltk/bin
        -D3RDPARTY_TK_INCLUDE_DIR=$GITHUB_WORKSPACE/3rdparty/tcltk/bin 
        -D3RDPARTY_TK_LIBRARY_DIR=$GITHUB_WORKSPACE/3rdparty/tcltk/lib
        -D3RDPARTY_TK_DLL_DIR=$GITHUB_WORKSPACE/3rdparty/tcltk/bin
        -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
    - name: Read Error File
      run: cat D:/a/OCCT/OCCT/build/CMakeFiles/CMakeOutput.log
      if: ${{ failure() }} 

    - name: Build OCCT
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test OCCT
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
